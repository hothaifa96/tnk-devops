pipeline {
   
    agent any
    stages {
        stage('isntall dependinces') {
            steps {
                // Build steps for the server
                script{
                    echo 'isntalling dependinces ...'
                    sh "pip3 install -r requirements.txt"
                }
            }
        }
        stage('Fetch XLSX from S3') {
            steps {
                script {
                    withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'ecr-credentials',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            sh "echo AWS_ACCESS_KEY_ID ${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY ${AWS_SECRET_ACCESS_KEY}"
                         sh "python3 convertor.py" 
                    }
                }
            }
        }
        
        //  stage('update the cluster') {
        //     steps {
        //         script {
        //                 echo 'Pushing Docker Image to ECR...'
        //                  withCredentials([[
        //                     $class: 'AmazonWebServicesCredentialsBinding',
        //                     credentialsId: 'ecr-credentials',
        //                     accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        //                     secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        //                 ]]) {
        //                     sh "aws ecs update-service --cluster Thnking-api --service api-service-1 --force-new-deployment --region eu-central-1"
        //                  }
        //         }
        //     }
        // }
       
    }
     post {
        always {
            script {
                try {
                    def buildStatus = currentBuild.currentResult
                    def buildDuration = currentBuild.durationString
                    def buildCauser = currentBuild.getBuildCauses()[0]?.shortDescription ?: 'N/A'

                    def emailSubject = "[Jenkins] Build Notification: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' - ${buildStatus}"
                    def emailBody = """
                        Hello Team,

                        This is an automated notification from Jenkins regarding the status of the job execution.

                        Job Details:
                        -------------
                        - Job Name       : ${env.JOB_NAME}
                        - Build Number   : ${env.BUILD_NUMBER}
                        - Build Status   : ${buildStatus}
                        - Build URL      : ${env.BUILD_URL}
                        - Execution Time : ${buildDuration}

                        Build Summary:
                        ---------------
                        - Started By     : ${buildCauser}

                        For more details, please visit the Jenkins Job Page: ${env.BUILD_URL}

                        Best regards,
                        Jenkins
                    """

                    mail bcc: '', body: emailBody, cc: '', from: 'jenkinshodi@gmail.com',
                         replyTo: 'jenkinshodi@gmail.com', subject: emailSubject, to: 'jenkinshodi@gmail.com'
                } catch (Exception e) {
                    echo "Failed to send email: ${e.message}"
                }
            }
        }
    }
}
